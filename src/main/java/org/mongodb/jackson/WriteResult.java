package org.mongodb.jackson;

import com.mongodb.CommandResult;
import com.mongodb.DBObject;
import com.mongodb.MongoException;
import com.mongodb.WriteConcern;

/**
 * This class lets you access the results of the previous write.
 * if you have STRICT mode on, this just stores the result of that getLastError call
 * if you don't, then this will actually do the getlasterror call.
 * if another operation has been done on this connection in the interim, calls will fail
 *
 * This class also gives you access to the saved objects, for the purposes of finding out the objects ids, if they were
 * generated by MongoDB.
 */
public class WriteResult<T> {
    private final JacksonDBCollection<T> jacksonDBCollection;
    private final DBObject[] dbObjects;
    private final com.mongodb.WriteResult writeResult;
    private T[] objects;

    protected WriteResult(JacksonDBCollection<T> jacksonDBCollection, com.mongodb.WriteResult writeResult, DBObject... dbObjects) {
        this.jacksonDBCollection = jacksonDBCollection;
        this.writeResult = writeResult;
        this.dbObjects = dbObjects;
    }

    /**
     * Get the object that was saved.  This will contain the updated ID if the ID was generated.
     * <p/>
     * Note, this operation is a little expensive because it has to deserialise the object.  If you just want the ID,
     * call getSavedId() instead.
     *
     * @return The saved object
     * @throws MongoException If no objects were saved
     */
    public T getSavedObject() {
        if (dbObjects.length == 0) {
            throw new MongoException("No objects to return");
        }
        return getSavedObjects()[0];
    }

    /**
     * Get the objects that were saved.  These will contain the updated IDs if the IDs were generated.
     * <p/>
     * Note, this operation is a little expensive because it has to deserialise the objects.  If you just want the IDs,
     * call getSavedIds() instead.
     *
     * @return The saved objects
     */
    public T[] getSavedObjects() {
        // Lazily generate the object, in case it's not needed.
        if (objects == null) {
            objects = jacksonDBCollection.convertFromDbObjects(dbObjects);
        }
        return objects;
    }


    /**
     * Get the saved ID.  This may be useful for finding out the ID that was generated by MongoDB if no ID was supplied.
     *
     * @return The saved ID
     * @throws MongoException If no objects were saved
     */
    public Object getSavedId() {
        if (dbObjects.length == 0) {
            throw new MongoException("No objects to return");
        }
        return dbObjects[0].get("_id");
    }

    /**
     * Get the saved IDs.  This may be useful for finding out the IDs that were generated by MongoDB if no IDs were
     * supplied.
     *
     * @return The saved IDs
     */
    public Object[] getSavedIds() {
        Object[] ids = new Object[dbObjects.length];
        for (int i = 0; i < dbObjects.length; i++) {
            ids[i] = dbObjects[i];
        }
        return ids;
    }

    /**
     * Get the underlying DBObject that was serialised before it was saved.  This will contain the updated ID if an
     * ID was generated.
     *
     * @return The underlying DBObject
     * @throws MongoException If no objects were saved
     */
    public DBObject getDbObject() {
        if (dbObjects.length == 0) {
            throw new MongoException("No objects to return");
        }
        return dbObjects[0];
    }

    /**
     * Get the underlying DBObjects that were serialised before they were saved.  These will contain the updated IDs if
     * IDs were generated.
]     *
     * @return The underlying DBObjects
     */
    public DBObject[] getDbObjects() {
        return dbObjects;
    }

    /**
     * The underlying write result
     *
     * @return Get the underlying MongoDB write result
     */
    public com.mongodb.WriteResult getWriteResult() {
        return writeResult;
    }

    /**
     * Gets the last result from getLastError()
     *
     * @return The last error
     */
    public CommandResult getCachedLastError() {
        return writeResult.getCachedLastError();

    }

    /**
     * Gets the last {@link com.mongodb.WriteConcern} used when calling getLastError()
     *
     * @return The last write concern.
     */
    public WriteConcern getLastConcern() {
        return writeResult.getLastConcern();

    }

    /**
     * calls {@link WriteResult#getLastError(com.mongodb.WriteConcern)} with concern=null
     *
     * @return The last error
     */
    public synchronized CommandResult getLastError() {
        return writeResult.getLastError();
    }

    /**
     * This method does following:
     * - returns the existing CommandResult if concern is null or less strict than the concern it was obtained with
     * - otherwise attempts to obtain a CommandResult by calling getLastError with the concern
     *
     * @param concern the concern
     * @return The last error for the concern
     */
    public synchronized CommandResult getLastError(WriteConcern concern) {
        return writeResult.getLastError(concern);
    }


    /**
     * Gets the error String ("err" field)
     *
     * @return The error string
     */
    public String getError() {
        return writeResult.getError();
    }

    /**
     * Gets the "n" field, which contains the number of documents
     * affected in the write operation.
     *
     * @return The n field
     */
    public int getN() {
        return writeResult.getN();
    }

    /**
     * Gets a field
     *
     * @param name field name
     * @return The value
     */
    public Object getField(String name) {
        return writeResult.getField(name);
    }

    /**
     * Returns whether or not the result is lazy, meaning that getLastError was not called automatically
     *
     * @return if it's lazy
     */
    public boolean isLazy() {
        return writeResult.isLazy();
    }

    @Override
    public String toString() {
        return writeResult.toString();
    }

}
